const arbol = document.getElementById("contenido_arbol");
        const btn = document.getElementById("btn_generar");

        // Prioridades de operadores
        const precedencia = {
            "+": 1,
            "-": 1,
            "*": 2,
            "/": 2
        };

        // Validar paréntesis balanceados
        function validarParentesis(expr) {
            let contador = 0;
            for (let char of expr) {
                if (char === '(') {
                    contador++;
                } else if (char === ')') {
                    contador--;
                    if (contador < 0) return false;
                }
            }
            return contador === 0;
        }

        // Validar sintaxis de la expresión
        function validarSintaxis(expr) {
            if (!/^[\d+\-*/() ]+$/.test(expr)) {
                return "La expresión contiene caracteres inválidos";
            }
            if (!validarParentesis(expr)) {
                return "Los paréntesis no están balanceados";
            }
            if (/[+\-*/]{2,}/.test(expr)) {
                return "No puede haber operadores consecutivos";
            }
            if (/[+\-*/]$/.test(expr.trim())) {
                return "La expresión no puede terminar con un operador";
            }
            if (/^[+*/]/.test(expr.trim())) {
                return "La expresión no puede comenzar con +, * o /";
            }
            if (/\(\s*\)/.test(expr)) {
                return "No puede haber paréntesis vacíos";
            }
            if (/\d\s*\(/.test(expr)) {
                return "Falta un operador entre número y paréntesis";
            }
            if (/\)\s*\d/.test(expr)) {
                return "Falta un operador después del paréntesis de cierre";
            }
            if (/\)\s*\(/.test(expr)) {
                return "Falta un operador entre paréntesis";
            }
            return null;
        }

        // Convertir a Postfix usando Shunting Yard
        function infixAPostfix(expr) {
            const output = [];
            const stack = [];
            const tokens = expr.match(/\d+|[+\-*/()]/g);

            if (!tokens) {
                throw new Error("No se pudieron extraer tokens válidos");
            }

            tokens.forEach(token => {
                if (!isNaN(token)) {
                    output.push(token);
                } else if ("+-*/".includes(token)) {
                    while (stack.length > 0 &&
                           "+-*/".includes(stack[stack.length - 1]) &&
                           precedencia[token] <= precedencia[stack[stack.length - 1]]) {
                        output.push(stack.pop());
                    }
                    stack.push(token);
                } else if (token === "(") {
                    stack.push(token);
                } else if (token === ")") {
                    while (stack.length && stack[stack.length - 1] !== "(") {
                        output.push(stack.pop());
                    }
                    if (stack.length === 0) {
                        throw new Error("Paréntesis no balanceados");
                    }
                    stack.pop();
                }
            });

            while (stack.length > 0) {
                if ("()".includes(stack[stack.length - 1])) {
                    throw new Error("Paréntesis no balanceados");
                }
                output.push(stack.pop());
            }

            return output;
        }

        // Construir árbol desde postfix
        let nodeId = 0;
        function construirArbol(postfix) {
            const stack = [];

            postfix.forEach(token => {
                if (!isNaN(token)) {
                    stack.push({
                        id: `n${nodeId++}`,
                        valor: token,
                        izq: null,
                        der: null
                    });
                } else {
                    if (stack.length < 2) {
                        throw new Error("Expresión inválida: operador sin suficientes operandos");
                    }
                    const der = stack.pop();
                    const izq = stack.pop();
                    stack.push({
                        id: `n${nodeId++}`,
                        valor: token,
                        izq,
                        der
                    });
                }
            });

            if (stack.length !== 1) {
                throw new Error("Expresión inválida: demasiados operandos");
            }

            return stack.pop();
        }

        // FUNCIONES DE RECORRIDO
        function recorridoInorden(nodo) {
            if (!nodo) return [];
            const resultado = [];
            resultado.push(...recorridoInorden(nodo.izq));
            resultado.push(nodo.valor);
            resultado.push(...recorridoInorden(nodo.der));
            return resultado;
        }

        function recorridoPreorden(nodo) {
            if (!nodo) return [];
            const resultado = [];
            resultado.push(nodo.valor);
            resultado.push(...recorridoPreorden(nodo.izq));
            resultado.push(...recorridoPreorden(nodo.der));
            return resultado;
        }

        function recorridoPostorden(nodo) {
            if (!nodo) return [];
            const resultado = [];
            resultado.push(...recorridoPostorden(nodo.izq));
            resultado.push(...recorridoPostorden(nodo.der));
            resultado.push(nodo.valor);
            return resultado;
        }

        function mostrarRecorridos(raiz) {
            const inorden = recorridoInorden(raiz);
            const preorden = recorridoPreorden(raiz);
            const postorden = recorridoPostorden(raiz);

            document.getElementById("resultado-inorden").textContent = inorden.join(" ");
            document.getElementById("resultado-preorden").textContent = preorden.join(" ");
            document.getElementById("resultado-postorden").textContent = postorden.join(" ");
            
            document.getElementById("seccion-recorridos").style.display = "block";
        }

        // Visualizar el árbol (recursivo)
        function renderArbol(nodo, nivel = 0, pos = 0, parent = null) {
            if (!nodo) return;

            const div = document.createElement("div");
            div.className = "nodo text-center";
            div.style.position = "absolute";
            div.style.top = `${nivel * 100}px`;
            div.style.left = `${pos * 80 + 400}px`;

            div.innerHTML = `<span id="${nodo.id}" class="btn btn-${isNaN(nodo.valor) ? "primary" : "success"} rounded-circle">${nodo.valor}</span>`;
            arbol.appendChild(div);

            if (parent) {
                new LeaderLine(
                    document.getElementById(parent.id),
                    document.getElementById(nodo.id),
                    { color: "blue", path: "straight" }
                );
            }

            renderArbol(nodo.izq, nivel + 1, pos - 1.5 ** (3 - nivel), nodo);
            renderArbol(nodo.der, nivel + 1, pos + 1.5 ** (3 - nivel), nodo);
        }

        btn.addEventListener("click", () => {
            arbol.innerHTML = "";
            nodeId = 0;
            document.getElementById("seccion-recorridos").style.display = "none";
            
            const expresion = document.getElementById("expresion").value.replace(/\s+/g, '');
            
            if (!expresion.trim()) {
                alert("Por favor ingresa una expresión matemática.");
                return;
            }
            
            const errorSintaxis = validarSintaxis(expresion);
            if (errorSintaxis) {
                alert(`Error: ${errorSintaxis}`);
                return;
            }
            
            try {
                const postfix = infixAPostfix(expresion);
                const raiz = construirArbol(postfix);
                renderArbol(raiz);
                mostrarRecorridos(raiz);
            } catch (e) {
                alert(`Error al procesar la expresión: ${e.message}`);
            }
        });